---
- name: Check if swarm is enabled
  shell: docker info
  changed_when: False
  register: docker_info

- name: Init swarm on the first manager
  shell: docker swarm init
        --listen-addr {{ docker_swarm_address }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_address }}
  when: "docker_info.stdout.find('Swarm: active') == -1
    and groups['dockermaster'][0] == inventory_hostname"

- name: Declare the address of the first Swarm manager as a fact.
  set_fact:
    docker_manager_address: "{{ docker_swarm_address }}:{{ docker_swarm_port }}"
  when: "groups['dockermaster'][0] == inventory_hostname"

- name: Distribute the fact containing address of the first swarm manager
  set_fact:
    docker_manager_address: "{{ hostvars[groups['dockermaster'][0]]['docker_manager_address'] }}"
  when: "groups['dockermaster'][0] != inventory_hostname"

- name: Get the worker to join the swarm using a token
  shell: docker swarm join-token -q worker
  changed_when: False
  register: docker_worker_token
  delegate_to: "{{ groups['dockermaster'][0] }}"
  delegate_facts: True
  when: "'dockerslave' in group_names"

- name: Get other manager join the swarm using a token
  shell: docker swarm join-token -q manager
  changed_when: False
  register: docker_manager_token
  delegate_to: "{{ groups['dockermaster'][0] }}"
  delegate_facts: True
  when: "'dockermaster' in group_names
    and groups['dockermaster'][0] != inventory_hostname"

- name: Join the pending swarm worker nodes
  shell: docker swarm join
        --listen-addr {{ docker_swarm_address }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_address }}
        --token "{{ docker_worker_token.stdout }}"
        {{ docker_manager_address }}
  changed_when: False
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and 'dockerslave' in group_names"

- name: Join the pending Swarm manager nodes.
  shell: docker swarm join
        --listen-addr {{ docker_swarm_address }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_address }}
        --token "{{ docker_manager_token.stdout }}"
        {{ docker_manager_address }}
  changed_when: False
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and 'dockermaster' in group_names
    and groups['dockermaster'][0] != inventory_hostname"

- name: Get the list of labels
  command: >-
         docker inspect
         --format {% raw %}'{{range $key, $value := .Spec.Labels}}{{printf "%s\n" $key}}{{end}}'{% endraw %}
         {{ ansible_hostname }}
  register: docker_swarm_labels
  changed_when: False
  delegate_to: "{{ groups['dockermaster'][0] }}"
  delegate_facts: True
  tags:
    - swarm_labels

- name: Remove labels from swarm node
  command: docker node update --label-rm {{ item }} {{ ansible_hostname }}
  with_items: "{{ docker_swarm_labels.stdout_lines }}"
  when: "{{ docker_swarm_labels.stdout_lines | count > 0 }}"
  changed_when: False
  delegate_to: "{{ groups['docker_swarm_manager'][0] }}"
  delegate_facts: True
  tags:
    - swarm_labels

- name: Asign labels to swarm nodes, if any
  command: docker node update --label-add {{ item }}=true {{ ansible_hostname }}
  changed_when: False
  with_items:
    - "{{ swarm_labels  | default([]) }}"
  delegate_to: "{{ groups['dockermaster'][0] }}"
  delegate_facts: True
  tags:
    - swarm_labels